package strategy_mode

/**
 * 1. 简单工厂模式需要让客户端接触两个类，而策略模式与简单工厂结合的用法，可以让客户端只接触一个类即可，耦合度更低，使得具体的算法彻底的与客户端分离
 * 2. 策略模式是一种定义一系列算法的方法，从概念上来看，所有算法完成的都是相同的工作，只不过实现不同，调用方可以以相同的方式调用所有算法，减少了各种算法类与
 * 使用算法类之间的耦合
 * 3. 策略模式的 Strategy 类层次为 Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能。
 * 4. 策略模式简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试
 * 5. 策略模式就是用来封装算法的，但是它可以用来封装几乎任何类型的规则，只要有在不同时间段应用不同的业务规则的需求，就可以考虑使用策略模式处理这种变化的可能性
 * 6. 基本的策略模式中，选择所用具体实现类的职责由客户端对象承担，并转给策略模式的 Context 对象，这本身没有接触客户端需要选择判断的压力。策略模式 + 简单工厂模式，选择
 * 具体实现的职责也可以由 Context 承担，最大化的减轻了客户端的职责
 */
fun main() {
    val context = StrategyContext(4)
    context.getCalculationResult()
}